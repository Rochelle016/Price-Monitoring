arrange(month,id) |>
group_by(month) |>
mutate(year = seq(from = 1990, to =2024)) |>
arrange(year,month) |>
ungroup() |>
left_join(CPI |>
mutate(month = match(Period,month.abb)),
by = c("month"="month",
"year" = "Year")) |>
filter(year>=1994) |>
ungroup() |>
mutate(farmReal = (palay_ordinary/`Rice CPI`)*100) |>
ungroup() |>
mutate(date = mdy(paste(month,"01",year,sep="-"))) |>
select(date,farmReal,farmNom = palay_ordinary)
MSRP_modeldata <-
CPSI |>
left_join(Farmgate) |>
left_join(CPSI_timetk_anomaly |>
select(date,sur_anomaly, contri_anomaly, retgap_anomaly,
ippgap_anomaly, pricedev_anomaly)
) |>
rename(Stocks  = SURCurrent) |>
mutate(RetNom_lag = lag(RetNom),
RetReal_lag = lag(RetReal),
WsaleNom_lag = lag(WsaleNom),
WsaleReal_lag = lag(WsaleReal),
FarmNom_lag = lag(farmNom),
FarmReal_lag = lag(farmReal),
IppNom_lag = lag(IppNom),
IppReal_lag = lag(IppReal),
Stocks_lag = lag(Stocks),
ChangeFarm = farmNom - lag(farmNom),
ChangeRet = RetNom - lag(RetNom),
ChangeWsale = WsaleNom - lag(WsaleNom),
ChangeIpp = IppNom - lag(IppNom),
ChangeStocks = Stocks - lag(Stocks),
FarmGap = (RetNom - farmNom)/RetNom,
WsaleGap = (RetNom - WsaleNom)/RetNom,
ImportGap = (RetNom - IppNom)/RetNom
)
MSRP_modeldata_filtered <-
MSRP_modeldata|>
# filter(c(sur_anomaly, contri_anomaly, retgap_anomaly,
#                    ippgap_anomaly, pricedev_anomaly) =="No") |>
filter(if_all(c(sur_anomaly, contri_anomaly, retgap_anomaly,
ippgap_anomaly, pricedev_anomaly), ~ . == "No")) |>
na.omit()
objective_function <- function(weights, data) {
# Extract weights for f() and g()
w_farmGap <- weights[1]
w_wsaleGap <- weights[2]
w_importGap <- weights[3]
w_retlag <- weights[4]
w_changeFarm <- weights[5]
w_changeWsale <- weights[6]
w_changeIpp <- weights[7]
w_changeStocks <- weights[8]
# Calculate g (weighted gap terms)
g <- w_farmGap * data$FarmGap + w_wsaleGap * data$WsaleGap + w_importGap * data$ImportGap
# Avoid division by zero
g[g == 0] <- 1e-6
# Calculate f (weighted price changes)
f <- w_retlag * data$RetNom_lag +
w_changeFarm * data$ChangeFarm +
w_changeWsale * data$ChangeWsale +
w_changeIpp * data$ChangeIpp +
w_changeStocks * data$ChangeStocks
# Predicted MSRP
predicted_msrp <- f / g
# Calculate Mean Squared Error
mse <- mean((data$RetNom - predicted_msrp)^2)
return(mse)
}
initial_weights <- rep(1, 8)
set.seed(1417)
result <- optim(
par = initial_weights,
fn = objective_function,
data = MSRP_modeldata_filtered,
method = "BFGS"
)
result
MSRP_predict <-
MSRP_modeldata |>
mutate(f_price = result$par[4]*RetNom_lag+ result$par[5]*ChangeFarm + result$par[6]*ChangeWsale + result$par[7]*ChangeIpp + result$par[8]*ChangeStocks ,
g_gap = result$par[1]*FarmGap + result$par[2]*WsaleGap + result$par[3]*ImportGap,
MSRP = f_price/g_gap)
MSRP_predict
library(yardstick)
metrics(MSRP_predict, truth = RetNom,estimate = MSRP)
library(nloptr)
nlop_res <- nloptr(
x0 = initial_weights,
eval_f = objective_function,
lb = rep(-10, 8),
ub = rep(10, 8),
opts = list(
algorithm = "NLOPT_LN_BOBYQA",
xtol_rel = 1e-6,
maxeval = 1000
),
data = MSRP_modeldata_filtered
)
nlop_res$solution
nlop_res$objective
nlop_res
nlop_res
rice_prices <- data.frame(
Month = seq(as.Date("2023-01-01"), as.Date("2023-12-01"), by = "months"),
Farmgate = c(30, 31, 30, 32, 33, 34, 33, 32, 31, 30, 29, 28),
Wholesale = c(35, 36, 35, 37, 38, 39, 38, 37, 36, 35, 34, 33),
Import = c(32, 33, 32, 34, 35, 36, 35, 34, 33, 32, 31, 30),
Retail = c(45, 44, 46, 47, 45, 44, 43, 42, 41, 40, 39, 38) # Example retail price
)
# Compute minimum observed margins historically
min_farmcap <- min((rice_prices$Retail - rice_prices$Farmgate) / rice_prices$Retail, na.rm = TRUE)
# Compute MSRP_min based on minimum farmgate margin
rice_prices <- rice_prices %>%
mutate(MSRP_min = Farmgate + (min_farmcap * Retail))
# View results
print(rice_prices)
rice_prices <- data.frame(
Month = seq(as.Date("2023-01-01"), as.Date("2023-12-01"), by = "months"),
Farmgate = c(30, 31, 30, 32, 33, 34, 33, 32, 31, 30, 29, 28),
Wholesale = c(35, 36, 35, 37, 38, 39, 38, 37, 36, 35, 34, 33),
Import = c(32, 33, 32, 34, 35, 36, 35, 34, 33, 32, 31, 30),
Retail = c(45, 44, 46, 47, 45, 44, 43, 42, 41, 40, 39, 38)
)
# Compute minimum observed margins historically
min_farmgap <- min((rice_prices$Retail - rice_prices$Farmgate) / rice_prices$Retail, na.rm = TRUE)
min_wholesalegap <- min((rice_prices$Retail - rice_prices$Wholesale) / rice_prices$Retail, na.rm = TRUE)
min_importgap <- min((rice_prices$Retail - rice_prices$Import) / rice_prices$Retail, na.rm = TRUE)
# Compute Min_Farmgate, Min_Wholesale, Min_Import based on historical gaps
rice_prices <- rice_prices %>%
mutate(
Min_Farmgate = Retail - (min_farmgap * Retail),
Min_Wholesale = Retail - (min_wholesalegap * Retail),
Min_Import = Retail - (min_importgap * Retail)
)
# View results
print(rice_prices)
library(dplyr)
library(zoo) # For rolling calculations
# Example dataset with additional months
rice_prices <- data.frame(
Month = seq(as.Date("2022-01-01"), as.Date("2023-12-01"), by = "months"),
Farmgate = c(30, 31, 30, 32, 33, 34, 33, 32, 31, 30, 29, 28,
27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38),
Wholesale = c(35, 36, 35, 37, 38, 39, 38, 37, 36, 35, 34, 33,
32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43),
Import = c(32, 33, 32, 34, 35, 36, 35, 34, 33, 32, 31, 30,
29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40)
)
# Define rolling window size (e.g., last 3 months)
window_size <- 3
# Compute rolling minimum for farmgate, wholesale, and import prices
rice_prices <- rice_prices %>%
mutate(
Min_Farmgate = rollapply(Farmgate, width = window_size, FUN = min, align = "right", fill = NA),
Min_Wholesale = rollapply(Wholesale, width = window_size, FUN = min, align = "right", fill = NA),
Min_Import = rollapply(Import, width = window_size, FUN = min, align = "right", fill = NA)
)
# View results
print(rice_prices)
rice_prices <- data.frame(
Month = seq(as.Date("2023-01-01"), as.Date("2023-12-01"), by = "months"),
Farmgate = c(30, 31, 30, 32, 33, 34, 33, 32, 31, 30, 29, 28),
Wholesale = c(35, 36, 35, 37, 38, 39, 38, 37, 36, 35, 34, 33),
Import = c(32, 33, 32, 34, 35, 36, 35, 34, 33, 32, 31, 30),
Retail = c(45, 44, 46, 47, 45, 44, 43, 42, 41, 40, 39, 38)
)
# Compute minimum absolute price differences (instead of percentage margins)
min_farmgap <- min(rice_prices$Retail - rice_prices$Farmgate, na.rm = TRUE)
min_wholesalegap <- min(rice_prices$Retail - rice_prices$Wholesale, na.rm = TRUE)
min_importgap <- min(rice_prices$Retail - rice_prices$Import, na.rm = TRUE)
# Compute Min_Farmgate, Min_Wholesale, Min_Import using absolute price gaps
rice_prices <- rice_prices %>%
mutate(
Min_Farmgate = Retail - min_farmgap,
Min_Wholesale = Retail - min_wholesalegap,
Min_Import = Retail - min_importgap
)
# View results
print(rice_prices)
library(shiny)
library(DT)
library(tidyverse)
library(openxlsx)
library(lubridate)
library(bslib)
library(bsicons)
library(plotly)
library(dplyr)
library(httr)
library(jsonlite)
library(shinyMatrix)
library(shiny)
library(DT)
library(tidyverse)
library(openxlsx)
library(lubridate)
library(bslib)
library(bsicons)
library(plotly)
library(dplyr)
library(httr)
library(jsonlite)
library(shinyMatrix)
library(shiny)
library(DT)
library(tidyverse)
library(openxlsx)
library(lubridate)
library(bslib)
library(bsicons)
library(plotly)
library(dplyr)
library(httr)
library(jsonlite)
library(shinyMatrix)
prices <-  list()
prices[["farmgate"]] <-  read.xlsx("Farmgate Prices, Monthly, 1990-2024.xlsx")
prices[["retail"]] <-  read.xlsx("Retail Prices, Monthly, 1990-2024.xlsx")
prices[["wsale"]] <-  read.xlsx("Wholesale Prices, Monthly, 1990-2024.xlsx")
CPI <-  read_csv("Rice-CPI.csv")
Index <- list()
Index[["01-RicePrice"]] <- PriceDevIndex
Index[["02-RiceInf"]] <-  read_csv("Rice Contri to Inflation.csv")
Index[["03-IppGap"]] <-  read.xlsx("IPP Wholesale Gap (anomalies).xlsx")  |>
mutate(Month = match(month, month.name),
date = mdy(paste(Month,"01",year,sep="-")),
ipp_gap = ippwsgap*100
)
Index[["04-WsaleGap"]] <-  read.xlsx("Wholesale-Retail-National-Level.xlsx")
Index[["05-SUR"]] <-  read.xlsx("stock_use_ratio (1).xlsx")
cpsi_anomaly_pred <- merged_data |>
mutate(predict = predict.glm(model2,newdata = merged_data, type ="response"),
anomaly_pred = if_else(predict>=0.5,1,0))
cpsi_anomaly_pred
cpsi_anomaly_pred
result
predicted_cpsi
objective_function <- function(weights, data) {
# Extract weights for f()
w_pricedev <- weights[1]
w_contri <- weights[2]
w_ippgap <- weights[3]
w_retgap <- weights[4]
w_surgap <- weights[5]
# Avoid division by zero
# g[g == 0] <- 1e-6
# Calculate f (weighted price changes)
f <- w_pricedev * merged_data$PriceDev +
w_contri * merged_data$Contri +
w_ippgap * merged_data$IPPGap +
w_retgap * merged_data$RetGap +
w_surgap * merged_data$SURindex
# Predicted MSRP
predicted_cpsi <- f
# Calculate Mean Squared Error
mse <- mean((merged_data$CPSI - predicted_cpsi)^2)
return(mse)
}
#Initial weights
initial_weights <- rep(.2, 5)
#Optimize
set.seed(1417)
result <- optim(
par = initial_weights,
fn = objective_function,
data = merged_data,
method = "BFGS"
)
# Normalize the optimized weights to sum to 1
optimized_weights <- result$par / sum(result$par)
# Print the results
print(optimized_weights)
predicted_cpsi
print(results)
# Load required packages
library(tidymodels)
library(lubridate)
library(tsibble)
library(modeltime)
library(tibble)
library(yardstick)
set.seed(1417)
# Convert to tsibble format
ts_cpsidata <- merged_data %>%
mutate(cpsi_anomaly2 = as.factor(cpsi_anomaly2),
cpsi_anomaly1 = as.factor(cpsi_anomaly1)) |>
as_tsibble(index = date)
# Train-test split: last year as test
train_data <- filter(ts_cpsidata, date < ymd("2023-01-01"))
test_data  <- filter(ts_cpsidata, date >= ymd("2023-01-01"))
# Define recipe
recipe <- recipe(cpsi_anomaly1 ~ PriceDev + Contri + IPPGap + RetGap + SURindex, data = train_data)
# Logistic Regression Model
log_model <- logistic_reg(mode = "classification") %>%
set_engine("glm")
# Decision Tree Model
tree_model <- decision_tree(mode = "classification") %>%
set_engine("rpart")
# Random Forest Model
rf_model <- rand_forest(mode = "classification", trees = 500) %>%
set_engine("ranger")
# Create workflows
log_wf <- workflow() %>% add_model(log_model) %>% add_recipe(recipe)
tree_wf <- workflow() %>% add_model(tree_model) %>% add_recipe(recipe)
rf_wf <- workflow() %>% add_model(rf_model) %>% add_recipe(recipe)
# Train models
log_fit <- log_wf %>% fit(data = train_data)
tree_fit <- tree_wf %>% fit(data = train_data)
rf_fit <- rf_wf %>% fit(data = train_data)
# Predictions on test set
log_preds <- predict(log_fit, test_data, type = "class") %>% bind_cols(test_data)
tree_preds <- predict(tree_fit, test_data, type = "class") %>% bind_cols(test_data)
rf_preds <- predict(rf_fit, test_data, type = "class") %>% bind_cols(test_data)
# Evaluate Performance
metrics <- metric_set(yardstick::accuracy, yardstick::precision, yardstick::recall, yardstick::f_meas)
log_results <- metrics(log_preds, truth = cpsi_anomaly1, estimate = .pred_class)
tree_results <- metrics(tree_preds, truth = cpsi_anomaly1, estimate = .pred_class)
rf_results <- metrics(rf_preds, truth = cpsi_anomaly1, estimate = .pred_class)
# Combine results
results <- bind_rows(
log_results %>% mutate(Model = "Logistic Regression"),
tree_results %>% mutate(Model = "Decision Tree"),
rf_results %>% mutate(Model = "Random Forest")
)
print(results)
log_preds
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
# custom css --------------------------------------------------------------
css <- ".navbar-nav, .nav-link.active {
--bs-navbar-hover-color: #C3C73C;
--bs-navbar-active-color: #C3C73C;
}
.nav-underline {
--bs-nav-underline-link-active-color:#0A9444;
}
.logo img {
max-height: 50px; /*Adjust logo size*/
}
.bslib-sidebar-layout>.main {
background-color: #11763b;
}
.irs-handle.single {
background-color: #0A9444
}
.irs-bar.irs-bar--single {
background: #0A9444;
border-top: 1px solid #0A9444;
border-bottom: 1px solid #0A9444;
height: 2px;
z-index: 2;
top: 0 px;
cursor: s-resize
}
.irs--shiny .irs-single {
background-color: #0A9444
}
.selectize-dropdown .selected {
background-color: #0A9444;
color: #ffffff;
}
.bslib-value-box .value-box-grid, .card {
background-color: #E3EADE;
}
"
# theme -------------------------------------------------------------------
theme <-  bs_theme(5,
font_scale = 0.9,
primary = "#0A9444")
bs_theme_update(theme,
primary = "#0A9444")
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
cpsi_data <- Index[["01-RicePrice"]] |>
left_join(Index[["02-RiceInf"]] |>
mutate(Month = match(Period,month.abb),
date = mdy(paste(Month,"01",Year,sep="-")),
Contri = Contri/100) |>
select(date,HeadInf=All,RiceInf=Rice,Contri)) |>
left_join(Index[["03-IppGap" ]] |>
select(date,IppReal=ippreal,IppNom =ippnom, WsaleReal=wholesale,IPPGap=ippwsgap)
) |>
left_join(Index[["04-WsaleGap"]] |>
mutate(Month = match(month,month.name),
date = mdy(paste(Month,"01",year,sep="-"))
) |>
select(date,
WsaleNom = rmr_wholesale,
RetGap = RMR_Diff)
) |>
left_join(Index[["05-SUR"]] |>
mutate(Month = match(month,month.name),
date = mdy(paste(Month,"01",Year,sep="-"))
) |>
ungroup() |>
arrange(date) |>
mutate(SURindex = (1- total.stocks/lag(total.use,12))
) |>
select(date,SURCurrent = total.stocks,
TotalUse = total.use,
SURindex)
) |>
na.omit() |>
mutate(Equal_CPSI =(abs(PriceDev) + abs(Contri) + abs(IPPGap) + abs(RetGap) + SURindex)*0.2,
risk_categ = case_when(CPSI <0.15~ "Low Risk",
CPSI>=0.15 & CPSI<0.25~ "Moderate Risk",
CPSI>=0.25 ~ "High Risk")
)
cpsi_data <- Index[["01-RicePrice"]] |>
left_join(Index[["02-RiceInf"]] |>
mutate(Month = match(Period,month.abb),
date = mdy(paste(Month,"01",Year,sep="-")),
Contri = Contri/100) |>
select(date,HeadInf=All,RiceInf=Rice,Contri)) |>
left_join(Index[["03-IppGap" ]] |>
select(date,IppReal=ippreal,IppNom =ippnom, WsaleReal=wholesale,IPPGap=ippwsgap)
) |>
left_join(Index[["04-WsaleGap"]] |>
mutate(Month = match(month,month.name),
date = mdy(paste(Month,"01",year,sep="-"))
) |>
select(date,
WsaleNom = rmr_wholesale,
RetGap = RMR_Diff)
) |>
left_join(Index[["05-SUR"]] |>
mutate(Month = match(month,month.name),
date = mdy(paste(Month,"01",Year,sep="-"))
) |>
ungroup() |>
arrange(date) |>
mutate(SURindex = (1- total.stocks/lag(total.use,12))
) |>
select(date,SURCurrent = total.stocks,
TotalUse = total.use,
SURindex)
) |>
na.omit() |>
mutate(Equal_CPSI =(abs(PriceDev) + abs(Contri) + abs(IPPGap) + abs(RetGap) + SURindex)*0.2,
risk_categ = case_when(Equal_CPSI<0.15~ "Low Risk",
Equal_CPSI>=0.15 & CPSI<0.25~ "Moderate Risk",
Equal_CPSI>=0.25 ~ "High Risk")
)
cpsi_data <- Index[["01-RicePrice"]] |>
left_join(Index[["02-RiceInf"]] |>
mutate(Month = match(Period,month.abb),
date = mdy(paste(Month,"01",Year,sep="-")),
Contri = Contri/100) |>
select(date,HeadInf=All,RiceInf=Rice,Contri)) |>
left_join(Index[["03-IppGap" ]] |>
select(date,IppReal=ippreal,IppNom =ippnom, WsaleReal=wholesale,IPPGap=ippwsgap)
) |>
left_join(Index[["04-WsaleGap"]] |>
mutate(Month = match(month,month.name),
date = mdy(paste(Month,"01",year,sep="-"))
) |>
select(date,
WsaleNom = rmr_wholesale,
RetGap = RMR_Diff)
) |>
left_join(Index[["05-SUR"]] |>
mutate(Month = match(month,month.name),
date = mdy(paste(Month,"01",Year,sep="-"))
) |>
ungroup() |>
arrange(date) |>
mutate(SURindex = (1- total.stocks/lag(total.use,12))
) |>
select(date,SURCurrent = total.stocks,
TotalUse = total.use,
SURindex)
) |>
na.omit() |>
mutate(Equal_CPSI =(abs(PriceDev) + abs(Contri) + abs(IPPGap) + abs(RetGap) + SURindex)*0.2,
risk_categ = case_when(Equal_CPSI<0.15~ "Low Risk",
Equal_CPSI>=0.15 & Equal_CPSI<0.25~ "Moderate Risk",
Equal_CPSI>=0.25 ~ "High Risk")
)
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
View(cpsi_data)
runApp('CPSIdash')
View(cpsi_data)
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
runApp('CPSIdash')
